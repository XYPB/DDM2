 {
    "name": "s3sh",
    "phase": "train", // train or val
    "gpu_ids": [
        0
    ],
    "path": { //set the path
        "log": "logs",
        "tb_logger": "tb_logger",
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "/home/yd344/project/DDM2/experiments/s3sh_230426_123305/checkpoint/latest"
    },
    "datasets": {
        "train": {
            "name": "s3sh",
            "dataroot": "/home/yd344/project/DDM2/dataset/sherbrooke_3shell/HARDI193.nii.gz",
            "valid_mask": [65,129],
            "phase": "train",
            "padding": 3,
            "val_volume_idx": 40,
            "val_slice_idx": 40, 
            "batch_size": 8,
            "in_channel": 1,
            "num_workers": 0,
            "use_shuffle": true,
            "canny_path": "/home/yd344/project/DDM2/dataset/sherbrooke_3shell/HARDI193_canny.nii.gz"
        },
        "val": {
            "name": "s3sh",
            "dataroot": "/home/yd344/project/DDM2/dataset/sherbrooke_3shell/HARDI193.nii.gz",
            "valid_mask": [65,129],
            "phase": "val",
            "padding": 3,
            "val_volume_idx": 40,
            "val_slice_idx": "all",
            "batch_size": 1,
            "in_channel": 1,
            "num_workers": 0,
            "canny_path": "/home/yd344/project/DDM2/dataset/sherbrooke_3shell/HARDI193_canny.nii.gz"
        }
    },
    "model": {
        "noise_diffusion": false,
        "ddim": false,
        "control_net": true,
        "which_model_G": "mri", // use the ddpm or sr3 network structure
        "finetune_norm": false,
        "drop_rate": 0.0,
        "unet": {
            "in_channel": 1,
            "out_channel": 1,
            "inner_channel": 32,
            "norm_groups": 32,
            "channel_multiplier": [
                1,
                2,
                4,
                8,
                8
            ],
            "attn_res": [
                16
            ],
            "res_blocks": 2,
            "dropout": 0.0,
            "version": "v1"
        },
        "beta_schedule": { // use munual beta_schedule for acceleration
            "train": {
                "schedule": "rev_warmup70",
                "n_timestep": 1000,
                "linear_start": 5e-5,
                "linear_end": 1e-2
            },
            "val": {
                "schedule": "rev_warmup70",
                "n_timestep": 1000,
                "linear_start": 5e-5,
                "linear_end": 1e-2
            }
        },
        "diffusion": {
            "image_size": 128,
            "channels": 3, //sample channel
            "conditional": true // unconditional generation or unconditional generation(super_resolution)
        }
    },
    "train": {
        "n_iter": 50000, //150000,
        "val_freq": 1e3,
        "save_checkpoint_freq": 1e4,
        "print_freq": 1e2,
        "optimizer": {
            "type": "adam",
            "lr": 1e-4
        },
        "ema_scheduler": { // not used now
            "step_start_ema": 5000,
            "update_ema_every": 1,
            "ema_decay": 0.9999
        }
    },
    // for Phase1
    "noise_model": {
        "resume_state": "/home/yd344/project/DDM2/experiments/sb_1_state_matching_noisemodel_230307_191642/checkpoint/latest", //"/home/users/tiangex/MRI_denoise/experiments/sb_1_noisemodel/checkpoint/latest",
        "drop_rate": 0.0,
        "unet": {
            "in_channel": 2,
            "out_channel": 1,
            "inner_channel": 32,
            "norm_groups": 32,
            "channel_multiplier": [
                1,
                2,
                4,
                8,
                8
            ],
            "attn_res": [
                16
            ],
            "res_blocks": 2,
            "dropout": 0.0,
            "version": "v1"
        },
        "beta_schedule": { // use munual beta_schedule for acceleration√ü
            "linear_start": 5e-5,
            "linear_end": 1e-2
        },
        "n_iter": 100000,
        "val_freq": 2e3,
        "save_checkpoint_freq": 1e4,
        "print_freq": 1e3,
        "optimizer": {
            "type": "adam",
            "lr": 1e-4
        }
    },
    "stage2_file": "/home/yd344/project/DDM2/experiments/sb_1_state_matching_noisemodel_230307_191642/stages.txt"
}